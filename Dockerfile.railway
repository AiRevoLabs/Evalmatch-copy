# Railway Dockerfile - Nginx + Express in single container
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install ALL dependencies (including dev deps for build)
RUN npm ci && npm cache clean --force

# Copy source code
COPY . .

# Build the client
RUN npm run build:client

# Build the server
RUN npm run build:server

# Production stage with nginx (Ubuntu-based for onnxruntime compatibility)
FROM nginx:latest

# Install Node.js, supervisor, and required dependencies
RUN apt-get update && apt-get install -y \
    nodejs \
    npm \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Copy nginx configuration
COPY nginx/default.conf /etc/nginx/conf.d/default.conf

# Copy built frontend to nginx html directory
COPY --from=builder /app/dist/public /usr/share/nginx/html

# Set up app directory
WORKDIR /app

# Copy built server, package files, node_modules, configs, startup scripts, and test data
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/railway-start.sh ./railway-start.sh
COPY --from=builder /app/test ./test
COPY nginx.conf.template ./nginx.conf.template
COPY start-express.sh ./start-express.sh

# Create supervisor directories and copy config
RUN mkdir -p /etc/supervisor/conf.d /var/log
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Make startup scripts executable
RUN chmod +x ./railway-start.sh ./start-express.sh

# Expose Railway's dynamic port
EXPOSE $PORT

# Start both nginx and Express with supervisor
CMD ["./railway-start.sh"]