# Railway Dockerfile - Nginx + Express in single container
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install ALL dependencies (including dev deps for build)
RUN npm ci && npm cache clean --force

# Copy source code
COPY . .

# Build the client
RUN npm run build:client

# Build the server
RUN npm run build:server

# Production stage with nginx
FROM nginx:alpine

# Install Node.js and supervisor
RUN apk add --no-cache nodejs npm supervisor

# Copy nginx configuration
COPY nginx/default.conf /etc/nginx/conf.d/default.conf

# Copy built frontend to nginx html directory
COPY --from=builder /app/dist/public /usr/share/nginx/html

# Set up app directory
WORKDIR /app

# Copy built server, package files, and node_modules
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules

# Create supervisor directories and copy config
RUN mkdir -p /etc/supervisor/conf.d /var/log
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create startup script
RUN echo '#!/bin/sh' > /start.sh && \
    echo 'echo "Starting Railway deployment with nginx + Express..."' >> /start.sh && \
    echo 'supervisord -c /etc/supervisor/conf.d/supervisord.conf' >> /start.sh && \
    chmod +x /start.sh

# Expose port 80 (nginx)
EXPOSE 80

# Start both nginx and Express with supervisor
CMD ["/start.sh"]